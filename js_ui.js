// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
function updateUserInterface(user) {
    const userInfo = document.getElementById('userInfo');
    
    if (user) {
        userInfo.innerHTML = `
            <img src="${user.photoURL}" alt="Avatar" class="user-avatar">
            <span>${user.displayName}</span>
            <button class="auth-btn" onclick="signOutUser()">–í—ã–π—Ç–∏</button>
        `;
        currentUser = user;
    } else {
        userInfo.innerHTML = `
            <button class="auth-btn" onclick="signInWithGoogle()">
                üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
            </button>
        `;
        currentUser = null;
    }
    
    updateSyncIndicator();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function updateSyncIndicator(status) {
    const indicator = document.getElementById('syncIndicator');
    
    if (!isFirebaseConfigured) {
        indicator.className = 'sync-indicator sync-offline';
        indicator.innerHTML = 'üì± –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º';
    } else if (!currentUser) {
        indicator.className = 'sync-indicator sync-offline';
        indicator.innerHTML = 'üîê –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω';
    } else if (!isOnline) {
        indicator.className = 'sync-indicator sync-offline';
        indicator.innerHTML = '‚ö†Ô∏è –û—Ñ—Ñ–ª–∞–π–Ω';
    } else {
        switch (status) {
            case 'syncing':
                indicator.className = 'sync-indicator sync-syncing';
                indicator.innerHTML = 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...';
                break;
            case 'online':
                indicator.className = 'sync-indicator sync-online';
                indicator.innerHTML = '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ';
                break;
            default:
                indicator.className = 'sync-indicator sync-offline';
                indicator.innerHTML = '‚ö†Ô∏è –û—Ñ—Ñ–ª–∞–π–Ω';
        }
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function updateDisplay() {
    const monthTransactions = transactions.filter(t => t.month === currentMonth);
    
    updateTransactionTable(monthTransactions);
    updateSummaryCards(monthTransactions);
    updateCategoryBreakdown(monthTransactions);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function updateTransactionTable(monthTransactions) {
    const tableBody = document.getElementById('transactionTable');
    tableBody.innerHTML = '';
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const sortedTransactions = monthTransactions.sort((a, b) => new Date(b.date) - new Date(a.date));
    
    sortedTransactions.forEach(transaction => {
        const row = document.createElement('tr');
        const categoryName = categories[transaction.type][transaction.category] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è';
        
        row.innerHTML = `
            <td>${new Date(transaction.date).toLocaleDateString('ru-RU')}</td>
            <td>${transaction.type === 'income' ? 'üíö –î–æ—Ö–æ–¥' : 'üí∏ –†–∞—Å—Ö–æ–¥'}</td>
            <td>${categoryName}</td>
            <td>${transaction.description || ''}</td>
            <td class="amount-${transaction.type}">${transaction.amount.toLocaleString('ru-RU')}</td>
            <td><strong>${transaction.currency}</strong></td>
            <td><button class="delete-btn" onclick="deleteTransaction(${transaction.id})">–£–¥–∞–ª–∏—Ç—å</button></td>
        `;
        
        tableBody.appendChild(row);
    });
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (sortedTransactions.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td colspan="7" style="text-align: center; color: #7f8c8d; padding: 30px;">
                –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü
            </td>
        `;
        tableBody.appendChild(row);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–≤–æ–¥–∫–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
function updateSummaryCards(monthTransactions) {
    const currencyTotals = {};
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
    monthTransactions.forEach(transaction => {
        if (!currencyTotals[transaction.currency]) {
            currencyTotals[transaction.currency] = { income: 0, expense: 0 };
        }
        currencyTotals[transaction.currency][transaction.type] += transaction.amount;
    });
    
    const summaryContainer = document.querySelector('.summary');
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (Object.keys(currencyTotals).length === 0) {
        summaryContainer.innerHTML = `
            <div class="summary-card">
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <div class="amount" style="color: #7f8c8d;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>
            </div>
        `;
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
    let summaryHTML = '';
    
    Object.keys(currencyTotals).sort().forEach(currency => {
        const income = currencyTotals[currency].income;
        const expense = currencyTotals[currency].expense;
        const balance = income - expense;
        
        summaryHTML += `
            <div class="summary-card income-card">
                <h3>üíö –î–æ—Ö–æ–¥ ${currency}</h3>
                <div class="amount">${income.toLocaleString('ru-RU')}</div>
            </div>
            <div class="summary-card expense-card">
                <h3>üí∏ –†–∞—Å—Ö–æ–¥ ${currency}</h3>
                <div class="amount">${expense.toLocaleString('ru-RU')}</div>
            </div>
            <div class="summary-card balance-card">
                <h3>üíé –ë–∞–ª–∞–Ω—Å ${currency}</h3>
                <div class="amount">${balance.toLocaleString('ru-RU')}</div>
            </div>
        `;
    });
    
    summaryContainer.innerHTML = summaryHTML;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
function updateCategoryBreakdown(monthTransactions) {
    const breakdown = {};
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –≤–∞–ª—é—Ç–∞–º
    monthTransactions.forEach(transaction => {
        const key = `${transaction.type}_${transaction.category}_${transaction.currency}`;
        if (!breakdown[key]) {
            breakdown[key] = {
                name: categories[transaction.type][transaction.category] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
                amount: 0,
                type: transaction.type,
                currency: transaction.currency
            };
        }
        breakdown[key].amount += transaction.amount;
    });
    
    const container = document.getElementById('categoryBreakdown');
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é
    if (Object.keys(breakdown).length === 0) {
        container.innerHTML = '';
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    container.innerHTML = `
        <h3 style="grid-column: 1/-1; color: #2c3e50; margin-bottom: 20px; text-align: center;">
            üìä –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        </h3>
    `;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—É–º–º–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    const sortedBreakdown = Object.values(breakdown).sort((a, b) => b.amount - a.amount);
    
    sortedBreakdown.forEach(item => {
        const div = document.createElement('div');
        div.className = 'category-item';
        
        const emoji = item.type === 'income' ? 'üíö' : 'üí∏';
        const currencyLabel = item.currency ? ` (${item.currency})` : '';
        
        div.innerHTML = `
            <div class="category-name">${emoji} ${item.name}${currencyLabel}</div>
            <div class="category-amount amount-${item.type}">
                ${item.amount.toLocaleString('ru-RU')}
            </div>
        `;
        
        container.appendChild(div);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
function showNotification(message, type = 'info') {
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ alert
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫—Ä–∞—Å–∏–≤—ã–µ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (type === 'error') {
        alert('–û—à–∏–±–∫–∞: ' + message);
    } else if (type === 'success') {
        console.log('–£—Å–ø–µ—Ö: ' + message);
    } else {
        console.log('–ò–Ω—Ñ–æ: ' + message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç
function formatCurrency(amount, currency) {
    return `${amount.toLocaleString('ru-RU')} ${currency}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
function getMonthName(monthIndex) {
    const months = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];
    return months[monthIndex] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
function validateTransactionForm() {
    const date = document.getElementById('dateInput').value;
    const amount = parseFloat(document.getElementById('amountInput').value);
    
    const errors = [];
    
    if (!date) {
        errors.push('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É');
    }
    
    if (!amount || amount <= 0) {
        errors.push('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    }
    
    if (errors.length > 0) {
        showNotification(errors.join(', '), 'error');
        return false;
    }
    
    return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function animateNewTransaction() {
    const tableBody = document.getElementById('transactionTable');
    const firstRow = tableBody.querySelector('tr');
    
    if (firstRow) {
        firstRow.style.backgroundColor = '#d4edda';
        setTimeout(() => {
            firstRow.style.backgroundColor = '';
        }, 1000);
    }
}

// –î–û–ü–û–õ–ù–ï–ù–ò–Ø –ö ui.js –î–õ–Ø –ú–û–ë–ò–õ–¨–ù–´–• –£–õ–£–ß–®–ï–ù–ò–ô

// –ú–æ–±–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü ui.js

// –î–µ—Ç–µ–∫—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function isMobileDevice() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
           window.innerWidth <= 768;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
function initMobileEnhancements() {
    if (isMobileDevice()) {
        setupThumbNavigation();
        setupMobileOptimizations();
        setupTouchGestures();
        setupHapticFeedback();
        setupMobileModals();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ thumb-friendly –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
function setupThumbNavigation() {
    const thumbNav = document.createElement('div');
    thumbNav.className = 'mobile-thumb-nav';
    thumbNav.innerHTML = `
        <button class="btn btn-add" onclick="scrollToAddForm()" title="–î–æ–±–∞–≤–∏—Ç—å">
            ‚ûï
        </button>
        <button class="btn btn-export" onclick="exportToExcel()" title="–≠–∫—Å–ø–æ—Ä—Ç">
            üìä
        </button>
        <button class="btn" onclick="scrollToTop()" title="–ù–∞–≤–µ—Ä—Ö">
            ‚¨ÜÔ∏è
        </button>
        <button class="btn" onclick="toggleMobileSummary()" title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞">
            üí∞
        </button>
    `;
    document.body.appendChild(thumbNav);
}

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ñ–æ—Ä–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function scrollToAddForm() {
    document.querySelector('.controls').scrollIntoView({ 
        behavior: 'smooth',
        block: 'start'
    });
    addHapticFeedback();
}

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–∞–≤–µ—Ä—Ö
function scrollToTop() {
    window.scrollTo({ 
        top: 0, 
        behavior: 'smooth' 
    });
    addHapticFeedback();
}

// –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏
function toggleMobileSummary() {
    const summary = document.querySelector('.summary');
    if (summary.style.display === 'none') {
        summary.style.display = 'grid';
        summary.scrollIntoView({ behavior: 'smooth' });
    } else {
        summary.style.display = 'none';
    }
    addHapticFeedback();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
function setupMobileOptimizations() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ zoom –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ input
    const inputs = document.querySelectorAll('input, select');
    inputs.forEach(input => {
        if (input.type !== 'date' && input.type !== 'number') {
            input.style.fontSize = '16px';
        }
    });
    
    // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    let lastScrollTop = 0;
    window.addEventListener('scroll', () => {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        if (scrollTop > lastScrollTop + 50) {
            // –°–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ - —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            document.activeElement.blur();
        }
        lastScrollTop = scrollTop;
    }, { passive: true });
    
    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    optimizeMobileTable();
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
function optimizeMobileTable() {
    const table = document.querySelector('table');
    if (!table) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö
    const headers = table.querySelectorAll('th');
    const cells = table.querySelectorAll('td');
    
    if (window.innerWidth <= 390) {
        // –°–∫—Ä—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö
        if (headers[3]) headers[3].classList.add('hide-on-small');
        cells.forEach((cell, index) => {
            if ((index + 1) % 7 === 4) { // –ö–∞–∂–¥–∞—è 4-—è –∫–æ–ª–æ–Ω–∫–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ)
                cell.classList.add('hide-on-small');
            }
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
    const tableContainer = document.querySelector('.table-container');
    if (tableContainer && !tableContainer.querySelector('.swipe-indicator')) {
        tableContainer.classList.add('swipe-indicator');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ touch –∂–µ—Å—Ç–æ–≤
function setupTouchGestures() {
    let startX, startY, currentX, currentY;
    
    // Swipe –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏
    const monthSelect = document.getElementById('monthSelect');
    
    document.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
    }, { passive: true });
    
    document.addEventListener('touchmove', (e) => {
        if (!startX || !startY) return;
        
        currentX = e.touches[0].clientX;
        currentY = e.touches[0].clientY;
    }, { passive: true });
    
    document.addEventListener('touchend', (e) => {
        if (!startX || !startY) return;
        
        const diffX = startX - currentX;
        const diffY = startY - currentY;
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π swipe –¥–ª—è —Å–º–µ–Ω—ã –º–µ—Å—è—Ü–∞
        if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
            if (diffX > 0) {
                // Swipe –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                changeMonth(1);
            } else {
                // Swipe –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
                changeMonth(-1);
            }
        }
        
        // –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π
        startX = startY = currentX = currentY = null;
    }, { passive: true });
}

// –°–º–µ–Ω–∞ –º–µ—Å—è—Ü–∞ —á–µ—Ä–µ–∑ swipe
function changeMonth(direction) {
    const monthSelect = document.getElementById('monthSelect');
    const currentMonth = parseInt(monthSelect.value);
    let newMonth = currentMonth + direction;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (0-11)
    if (newMonth < 0) newMonth = 11;
    if (newMonth > 11) newMonth = 0;
    
    monthSelect.value = newMonth;
    monthSelect.dispatchEvent(new Event('change'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –º–µ—Å—è—Ü–∞
    showMobileToast(`–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ${getMonthName(newMonth)}`);
    addHapticFeedback();
}

// –ú–æ–±–∏–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (toast)
function showMobileToast(message, duration = 2000) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π toast –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingToast = document.querySelector('.mobile-toast');
    if (existingToast) {
        existingToast.remove();
    }
    
    const toast = document.createElement('div');
    toast.className = 'mobile-toast';
    toast.textContent = message;
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0,0,0,0.8);
        color: white;
        padding: 10px 20px;
        border-radius: 20px;
        font-size: 14px;
        z-index: 3000;
        backdrop-filter: blur(10px);
        opacity: 0;
        transition: opacity 0.3s ease;
    `;
    
    document.body.appendChild(toast);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
        toast.style.opacity = '1';
    });
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => toast.remove(), 300);
    }, duration);
}

// –ò–º–∏—Ç–∞—Ü–∏—è haptic feedback
function setupHapticFeedback() {
    // –î–æ–±–∞–≤–ª—è–µ–º haptic feedback –∫–æ –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º
    const buttons = document.querySelectorAll('.btn');
    buttons.forEach(button => {
        button.addEventListener('click', addHapticFeedback);
    });
}

function addHapticFeedback() {
    // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π haptic feedback –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (navigator.vibrate) {
        navigator.vibrate(10); // –ö–æ—Ä–æ—Ç–∫–∞—è –≤–∏–±—Ä–∞—Ü–∏—è
    }
    
    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è haptic feedback
    event.target.classList.add('haptic-feedback');
    setTimeout(() => {
        event.target.classList.remove('haptic-feedback');
    }, 100);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function setupMobileModals() {
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
}

// –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ —ç–∫—Ä–∞–Ω–∞
function handleOrientationChange() {
    setTimeout(() => {
        optimizeMobileTable();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º viewport height –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
    }, 100);
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
function validateMobileForm() {
    const errors = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const date = document.getElementById('dateInput').value;
    const amount = parseFloat(document.getElementById('amountInput').value);
    
    if (!date) {
        errors.push('üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É');
    }
    
    if (!amount || amount <= 0) {
        errors.push('üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    }
    
    if (errors.length > 0) {
        showMobileToast(errors.join(', '), 3000);
        addHapticFeedback();
        return false;
    }
    
    return true;
}

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
function optimizeMobilePerformance() {
    // Lazy loading –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if (transactions.length > 50) {
        implementVirtualScrolling();
    }
    
    // Debounce –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const searchInput = document.querySelector('#searchInput');
    if (searchInput) {
        let searchTimeout;
        searchInput.addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                filterTransactions(e.target.value);
            }, 300);
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
document.addEventListener('DOMContentLoaded', () => {
    if (isMobileDevice()) {
        initMobileEnhancements();
        
        // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        window.addEventListener('orientationchange', handleOrientationChange);
        window.addEventListener('resize', handleOrientationChange);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è viewport height
        const vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.mobileEnhancements = {
    showToast: showMobileToast,
    addHapticFeedback: addHapticFeedback,
    isMobileDevice: isMobileDevice
};
