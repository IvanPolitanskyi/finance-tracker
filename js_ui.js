// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
function updateUserInterface(user) {
    const userInfo = document.getElementById('userInfo');
    
    if (user) {
        userInfo.innerHTML = `
            <img src="${user.photoURL}" alt="Avatar" class="user-avatar">
            <span>${user.displayName}</span>
            <button class="auth-btn" onclick="signOutUser()">–í—ã–π—Ç–∏</button>
        `;
        currentUser = user;
    } else {
        userInfo.innerHTML = `
            <button class="auth-btn" onclick="signInWithGoogle()">
                üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
            </button>
        `;
        currentUser = null;
    }
    
    updateSyncIndicator();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function updateSyncIndicator(status) {
    const indicator = document.getElementById('syncIndicator');
    
    if (typeof isFirebaseConfigured === 'undefined' || !isFirebaseConfigured) {
        indicator.className = 'sync-indicator sync-offline';
        indicator.innerHTML = 'üì± –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º';
    } else if (!currentUser) {
        indicator.className = 'sync-indicator sync-offline';
        indicator.innerHTML = 'üîê –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω';
    } else if (!isOnline) {
        indicator.className = 'sync-indicator sync-offline';
        indicator.innerHTML = '‚ö†Ô∏è –û—Ñ—Ñ–ª–∞–π–Ω';
    } else {
        switch (status) {
            case 'syncing':
                indicator.className = 'sync-indicator sync-syncing';
                indicator.innerHTML = 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...';
                break;
            case 'online':
                indicator.className = 'sync-indicator sync-online';
                indicator.innerHTML = '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ';
                break;
            default:
                indicator.className = 'sync-indicator sync-offline';
                indicator.innerHTML = '‚ö†Ô∏è –û—Ñ—Ñ–ª–∞–π–Ω';
        }
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function updateDisplay() {
    const monthTransactions = transactions.filter(t => t.month === currentMonth);
    
    updateDashboard();
    updateSummaryCards(monthTransactions);
    updateRecentTransactions();
    updateTransactionsPage();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
function updateDashboard() {
    const currentMonthTransactions = transactions.filter(t => t.month === currentMonth);
    
    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
    const currencyTotals = {};
    let totalBalanceInMDL = 0;
    
    transactions.forEach(transaction => {
        if (!currencyTotals[transaction.currency]) {
            currencyTotals[transaction.currency] = { income: 0, expense: 0 };
        }
        currencyTotals[transaction.currency][transaction.type] += transaction.amount;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MDL –¥–ª—è –æ–±—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        const amountInMDL = transaction.amount * currencies[transaction.currency].rate;
        if (transaction.type === 'income') {
            totalBalanceInMDL += amountInMDL;
        } else {
            totalBalanceInMDL -= amountInMDL;
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
    document.getElementById('total-balance').textContent = `${totalBalanceInMDL.toLocaleString('ru-RU')} MDL`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–≤–æ–¥–∫–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
function updateSummaryCards(monthTransactions) {
    const currencyTotals = {};
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
    monthTransactions.forEach(transaction => {
        if (!currencyTotals[transaction.currency]) {
            currencyTotals[transaction.currency] = { income: 0, expense: 0 };
        }
        currencyTotals[transaction.currency][transaction.type] += transaction.amount;
    });
    
    const summaryContainer = document.getElementById('summaryContainer');
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (Object.keys(currencyTotals).length === 0) {
        summaryContainer.innerHTML = `
            <div class="summary-card">
                <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                <div class="amount" style="color: #7f8c8d;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü</div>
            </div>
        `;
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç—ã
    let summaryHTML = '';
    
    Object.keys(currencyTotals).sort().forEach(currency => {
        const income = currencyTotals[currency].income;
        const expense = currencyTotals[currency].expense;
        const balance = income - expense;
        
        summaryHTML += `
            <div class="summary-card income-card">
                <h3>üíö –î–æ—Ö–æ–¥ ${currency}</h3>
                <div class="amount">${income.toLocaleString('ru-RU')}</div>
            </div>
            <div class="summary-card expense-card">
                <h3>üí∏ –†–∞—Å—Ö–æ–¥ ${currency}</h3>
                <div class="amount">${expense.toLocaleString('ru-RU')}</div>
            </div>
            <div class="summary-card balance-card">
                <h3>üíé –ë–∞–ª–∞–Ω—Å ${currency}</h3>
                <div class="amount">${balance.toLocaleString('ru-RU')}</div>
            </div>
        `;
    });
    
    summaryContainer.innerHTML = summaryHTML;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
function updateRecentTransactions() {
    const recentTransactions = transactions
        .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
        .slice(0, 5);
    
    displayTransactionsModern(recentTransactions, 'recent-transactions');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function updateTransactionsPage() {
    const allTransactions = [...transactions].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    displayTransactionsTable(allTransactions);
}

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞)
function displayTransactionsModern(transactionsList, containerId) {
    const container = document.getElementById(containerId);
    container.innerHTML = '';
    
    if (transactionsList.length === 0) {
        container.innerHTML = '<div style="padding: 40px; text-align: center; color: #64748b;">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</div>';
        return;
    }
    
    transactionsList.forEach(transaction => {
        const category = categories[transaction.type][transaction.category];
        const isIncome = transaction.type === 'income';
        
        const item = document.createElement('div');
        item.className = 'transaction-item';
        item.innerHTML = `
            <div class="transaction-icon" style="background: ${isIncome ? '#dcfce7' : '#fef2f2'}; color: ${isIncome ? '#16a34a' : '#dc2626'}">
                ${category.icon}
            </div>
            <div class="transaction-info">
                <h4>${category.name}</h4>
                <p>${transaction.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
            </div>
            <div style="font-size: 12px; color: #64748b;">
                ${new Date(transaction.date).toLocaleDateString('ru-RU')}
            </div>
            <div class="transaction-amount ${isIncome ? 'amount-positive' : 'amount-negative'}">
                ${isIncome ? '+' : '-'}${transaction.amount.toLocaleString('ru-RU')} ${transaction.currency}
            </div>
            <button onclick="deleteTransaction(${transaction.id})" style="background: none; border: none; cursor: pointer; color: #64748b; font-size: 16px;">üóëÔ∏è</button>
        `;
        
        container.appendChild(item);
    });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ (–¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
function displayTransactionsTable(transactionsList) {
    const tableBody = document.getElementById('transactionTable');
    tableBody.innerHTML = '';
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    const sortedTransactions = transactionsList.sort((a, b) => new Date(b.date) - new Date(a.date));
    
    sortedTransactions.forEach(transaction => {
        const row = document.createElement('tr');
        const categoryName = categories[transaction.type][transaction.category].name;
        
        row.innerHTML = `
            <td>${new Date(transaction.date).toLocaleDateString('ru-RU')}</td>
            <td>${transaction.type === 'income' ? 'üíö –î–æ—Ö–æ–¥' : 'üí∏ –†–∞—Å—Ö–æ–¥'}</td>
            <td>${categoryName}</td>
            <td>${transaction.description || ''}</td>
            <td class="amount-${transaction.type}">${transaction.amount.toLocaleString('ru-RU')}</td>
            <td><strong>${transaction.currency}</strong></td>
            <td><button class="delete-btn" onclick="deleteTransaction(${transaction.id})">–£–¥–∞–ª–∏—Ç—å</button></td>
        `;
        
        tableBody.appendChild(row);
    });
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (sortedTransactions.length === 0) {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td colspan="7" style="text-align: center; color: #7f8c8d; padding: 30px;">
                –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            </td>
        `;
        tableBody.appendChild(row);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function updateCategoriesPage() {
    const breakdown = {};
    const currentMonthTransactions = transactions.filter(t => t.month === currentMonth);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –≤–∞–ª—é—Ç–∞–º
    currentMonthTransactions.forEach(transaction => {
        const key = `${transaction.type}_${transaction.category}_${transaction.currency}`;
        if (!breakdown[key]) {
            breakdown[key] = {
                name: categories[transaction.type][transaction.category].name,
                icon: categories[transaction.type][transaction.category].icon,
                amount: 0,
                type: transaction.type,
                currency: transaction.currency
            };
        }
        breakdown[key].amount += transaction.amount;
    });
    
    const container = document.getElementById('categoryBreakdown');
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (Object.keys(breakdown).length === 0) {
        container.innerHTML = `
            <div class="category-card">
                <div class="category-icon">üìä</div>
                <div class="category-name">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>
                <div class="category-amount">–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</div>
            </div>
        `;
        return;
    }
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    container.innerHTML = '';
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—É–º–º–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    const sortedBreakdown = Object.values(breakdown).sort((a, b) => b.amount - a.amount);
    
    sortedBreakdown.forEach(item => {
        const card = document.createElement('div');
        card.className = 'category-card';
        
        const emoji = item.type === 'income' ? 'üíö' : 'üí∏';
        const currencyLabel = item.currency ? ` (${item.currency})` : '';
        
        card.innerHTML = `
            <div class="category-icon">${item.icon}</div>
            <div class="category-name">${item.name}${currencyLabel}</div>
            <div class="category-amount">
                ${emoji} ${item.amount.toLocaleString('ru-RU')} ${item.currency}
            </div>
        `;
        
        container.appendChild(card);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ alert
    if (type === 'error') {
        alert('–û—à–∏–±–∫–∞: ' + message);
    } else if (type === 'success') {
        console.log('–£—Å–ø–µ—Ö: ' + message);
    } else {
        console.log('–ò–Ω—Ñ–æ: ' + message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç
function formatCurrency(amount, currency) {
    return `${amount.toLocaleString('ru-RU')} ${currency}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
function getMonthName(monthIndex) {
    const months = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];
    return months[monthIndex] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
function validateTransactionForm() {
    const date = document.getElementById('dateInput').value;
    const amount = parseFloat(document.getElementById('amountInput').value);
    
    const errors = [];
    
    if (!date) {
        errors.push('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É');
    }
    
    if (!amount || amount <= 0) {
        errors.push('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    }
    
    if (errors.length > 0) {
        showNotification(errors.join(', '), 'error');
        return false;
    }
    
    return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function animateNewTransaction() {
    const tableBody = document.getElementById('transactionTable');
    const firstRow = tableBody.querySelector('tr');
    
    if (firstRow) {
        firstRow.style.backgroundColor = '#d4edda';
        setTimeout(() => {
            firstRow.style.backgroundColor = '';
        }, 1000);
    }
}