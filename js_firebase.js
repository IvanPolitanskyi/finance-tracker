// Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const firebaseConfig = {
    apiKey: "AIzaSyCGGVVdO_6PWRzfZmVTF2seGYXvAnvXmRs",
    authDomain: "finance-tracker-9ec6d.firebaseapp.com",
    projectId: "finance-tracker-9ec6d",
    storageBucket: "finance-tracker-9ec6d.firebasestorage.app",
    messagingSenderId: "1008097998702",
    appId: "1:1008097998702:web:5a93e734199d9bb98d737f"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
let app, auth, db, googleProvider;
let isFirebaseInitialized = false;

try {
    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase...");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
    app = firebase.initializeApp(firebaseConfig);
    auth = firebase.auth();
    db = firebase.firestore();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    googleProvider = new firebase.auth.GoogleAuthProvider();
    googleProvider.addScope('email');
    googleProvider.addScope('profile');
    
    // –î–æ–±–∞–≤–ª—è–µ–º custom –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã popup
    googleProvider.setCustomParameters({
        'prompt': 'select_account',
        'display': 'popup'
    });
    
    isFirebaseInitialized = true;
    console.log("Firebase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
} catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:", error);
    isFirebaseInitialized = false;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google
async function signInWithGoogle() {
    if (!isFirebaseInitialized) {
        console.error("Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        return;
    }

    try {
        console.log("–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google...");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å popup
        if (typeof window !== 'undefined' && window.navigator.userAgent.includes('Instagram')) {
            // –î–ª—è Instagram –∏ –¥—Ä—É–≥–∏—Ö –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º redirect
            await auth.signInWithRedirect(googleProvider);
            return;
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ - popup
        const result = await auth.signInWithPopup(googleProvider);
        
        const user = result.user;
        console.log("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:", user.displayName);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateAuthUI(user);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await loadUserTransactions();
        
        return result;
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        switch (error.code) {
            case 'auth/popup-closed-by-user':
                // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                console.log("Popup –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–±—É–µ–º redirect...");
                try {
                    await auth.signInWithRedirect(googleProvider);
                } catch (redirectError) {
                    console.error("–û—à–∏–±–∫–∞ redirect:", redirectError);
                    showUserMessage("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", "error");
                }
                break;
                
            case 'auth/popup-blocked':
                console.log("Popup –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º redirect...");
                try {
                    await auth.signInWithRedirect(googleProvider);
                } catch (redirectError) {
                    console.error("–û—à–∏–±–∫–∞ redirect:", redirectError);
                    showUserMessage("–†–∞–∑—Ä–µ—à–∏—Ç–µ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", "error");
                }
                break;
                
            case 'auth/unauthorized-domain':
                console.error("–î–æ–º–µ–Ω –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", error.message);
                showUserMessage("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", "error");
                break;
                
            default:
                console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
                showUserMessage("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: " + error.message, "error");
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
async function signOutUser() {
    if (!isFirebaseInitialized) return;
    
    try {
        await auth.signOut();
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateAuthUI(null);
        
        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        transactions = [];
        updateDisplay();
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
        showUserMessage("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: " + error.message, "error");
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ redirect (–µ—Å–ª–∏ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)
auth.getRedirectResult().then((result) => {
    if (result.user) {
        console.log("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ redirect:", result.user.displayName);
        updateAuthUI(result.user);
        loadUserTransactions();
    }
}).catch((error) => {
    console.error("–û—à–∏–±–∫–∞ redirect result:", error);
});

// –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
auth.onAuthStateChanged((user) => {
    console.log("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", user ? user.displayName : "–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
    updateAuthUI(user);
    
    if (user) {
        loadUserTransactions();
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        transactions = [];
        updateDisplay();
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function updateAuthUI(user) {
    const loginBtn = document.getElementById('loginBtn');
    const userInfo = document.getElementById('userInfo');
    const userName = document.getElementById('userName');
    const userPhoto = document.getElementById('userPhoto');
    
    if (user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        loginBtn.style.display = 'none';
        userInfo.style.display = 'flex';
        userName.textContent = user.displayName || user.email;
        
        if (user.photoURL) {
            userPhoto.src = user.photoURL;
            userPhoto.style.display = 'block';
        } else {
            userPhoto.style.display = 'none';
        }
        
        updateSyncStatus("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        loginBtn.style.display = 'block';
        userInfo.style.display = 'none';
        updateSyncStatus("‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
function showUserMessage(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 8px;
        color: white;
        font-weight: bold;
        z-index: 10000;
        max-width: 300px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transition: all 0.3s ease;
    `;
    
    // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (type) {
        case 'error':
            notification.style.background = '#e74c3c';
            break;
        case 'success':
            notification.style.background = '#27ae60';
            break;
        default:
            notification.style.background = '#3498db';
    }
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 300);
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firestore
async function saveTransactionToFirestore(transaction) {
    if (!isFirebaseInitialized || !auth.currentUser) {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ");
        return false;
    }
    
    try {
        const userCollection = db.collection('users').doc(auth.currentUser.uid).collection('transactions');
        await userCollection.add({
            ...transaction,
            timestamp: firebase.firestore.FieldValue.serverTimestamp()
        });
        
        updateSyncStatus("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
        return true;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firestore:", error);
        updateSyncStatus("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
        return false;
    }
}

async function loadUserTransactions() {
    if (!isFirebaseInitialized || !auth.currentUser) {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        return;
    }
    
    try {
        updateSyncStatus("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
        
        const userCollection = db.collection('users').doc(auth.currentUser.uid).collection('transactions');
        const snapshot = await userCollection.orderBy('date', 'desc').get();
        
        const cloudTransactions = [];
        snapshot.forEach(doc => {
            const data = doc.data();
            cloudTransactions.push({
                id: doc.id,
                ...data
            });
        });
        
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cloudTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –æ–±–ª–∞–∫–∞`);
        
        // –ú–µ—Ä–¥–∂–∏–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        mergeTransactions(cloudTransactions);
        updateDisplay();
        updateSyncStatus("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
        updateSyncStatus("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    }
}

async function deleteTransactionFromFirestore(transactionId) {
    if (!isFirebaseInitialized || !auth.currentUser || !transactionId) {
        return false;
    }
    
    try {
        const userCollection = db.collection('users').doc(auth.currentUser.uid).collection('transactions');
        await userCollection.doc(transactionId).delete();
        
        updateSyncStatus("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
        return true;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Firestore:", error);
        updateSyncStatus("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
function updateSyncStatus(status) {
    const syncStatusElement = document.getElementById('syncStatus');
    if (syncStatusElement) {
        syncStatusElement.textContent = status;
    }
}

// –§—É–Ω–∫—Ü–∏—è –º–µ—Ä–¥–∂–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
function mergeTransactions(cloudTransactions) {
    if (cloudTransactions.length === 0) return;
    
    // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–∞—á–Ω—ã–µ
    if (!transactions || transactions.length === 0) {
        transactions = cloudTransactions;
        return;
    }
    
    // –ú–µ—Ä–¥–∂–∏–º –¥–∞–Ω–Ω—ã–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –æ–±–ª–∞—á–Ω—ã—Ö)
    const mergedMap = new Map();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ
    transactions.forEach(t => {
        if (!t.id) t.id = generateId();
        mergedMap.set(t.id, t);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞—á–Ω—ã–º–∏
    cloudTransactions.forEach(t => {
        mergedMap.set(t.id, t);
    });
    
    transactions = Array.from(mergedMap.values());
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
function generateId() {
    return Date.now().toString() + Math.random().toString(36).substr(2, 9);
}

console.log("Firebase –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω");
